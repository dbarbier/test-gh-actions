name: Build

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      fulldocs:
        description: 'Build documentation'
        required: true
        default: "false"

jobs:
  init:
    # This job determines whether we want to run a full build with documentation;
    # it sets a context variable ${{needs.init.outputs.fulldocs}} which can be used
    # in other steps if their job is declared as "needs: init".
    runs-on: ubuntu-latest
    name: Set workflow variables
    outputs:
      fulldocs: ${{ steps.setvars.outputs.fulldocs }}

    steps:
      - id: setvars
        name: Set workflow variables
        shell: bash -x {0}
        run: |
          fulldocs=0
          if [ "${{github.event_name}}" = "schedule" ]; then
            fulldocs=1
          elif [ "${{github.event_name}}" = "workflow_dispatch" ]; then
            # fulldocs is 1 if first character is t, T or 1
            expr " ${{github.event.inputs.fulldocs}}" : " [tT1]" >/dev/null && fulldocs=1
          elif [ "${{github.event_name}}" = "push" ]; then
            # fulldocs is 1 if pushing on main or ci-doc/*, 0 otherwise
            # GITHUB_REF_NAME environment variable is undocumented
            if [ "$GITHUB_REF_NAME" = "main" ] || expr " $GITHUB_REF_NAME" : " ci-doc/" >/dev/null; then
              fulldocs=1
            fi
          elif [ "${{github.event_name}}" = "pull_request" ]; then
            fulldocs=1
          fi
          echo "::set-output name=fulldocs::$fulldocs"

  build:
    needs: init
    name: ${{ matrix.cfg.name }}
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { os: macos-latest, name: MacOS, doc: 0 }
          - { os: ubuntu-latest, name: Ubuntu, doc: 0 }
          - { os: windows-latest, name: Windows, doc: 0 }
    runs-on: ${{ matrix.cfg.os }}
    env:
      DEPS_IN_CACHE: "-DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON"

    steps:
      - name: Print env
        shell: bash
        run: |
          echo "Event: ${{github.event_name}} on ${{github.sha}}"
          env | grep GITHUB_ | sort

      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: false
          ref: ${{ needs.init.outputs.ref }}

      - name: Install Python
        if: matrix.cfg.doc == 1
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install gtest and json (cache hit)
        id: cache-json-gtest
        uses: actions/cache@v2
        with:
          path: |
            build/_deps/googletest-src
            build/_deps/json-src
          key: deps-nlohmann_json-3.10.4/gtest-1.11.0

      - name: Install gtest and json (cache not hit)
        if: steps.cache-json-gtest.outputs.cache-hit != 'true'
        run: echo "DEPS_IN_CACHE=" >> $GITHUB_ENV

      - name: Install tinytex
        if: matrix.cfg.doc == 1
        uses: r-lib/actions/setup-tinytex@v1

      - name: Install required LaTeX packages (Windows)
        if: startsWith(matrix.cfg.os, 'windows') && matrix.cfg.doc == 1
        run: |
          tlmgr install (Get-Content .\scripts\tex-packages.txt | where { $_ -notmatch "(^\s*#)|(^\s*$)" })

      - name: Install required LaTeX packages (Unix)
        if: (startsWith(matrix.cfg.os, 'macos') || startsWith(matrix.cfg.os, 'ubuntu')) && matrix.cfg.doc == 1
        run: |
          grep -v -E '^\s*(#.*)$' scripts/tex-packages.txt | xargs tlmgr install

      - name: Install dependencies for documentation (Windows)
        if: startsWith(matrix.cfg.os, 'windows') && matrix.cfg.doc == 1
        shell: pwsh
        run: |
          choco install -y --no-progress graphviz.portable
          # Update PATH
          echo "C:/Program Files/doxygen/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Query graphviz version (MacOS)
        id: mac-graphviz-version
        if: startsWith(matrix.cfg.os, 'macos') && matrix.cfg.doc == 1
        shell: bash -x {0}
        run: |
          version=$(brew info --json=v1 graphviz | jq '.[].versions.stable' | sed -e 's/"//g')
          echo "::set-output name=version::$version"

      - name: Install graphviz (MacOS)
        id: cache-graphviz
        uses: actions/cache@v2
        if: startsWith(matrix.cfg.os, 'macos') && matrix.cfg.doc == 1
        with:
          # FIXME: howto keep this list up-to-date?
          path: |
            /usr/local/Cellar/cairo
            /usr/local/Cellar/fribidi
            /usr/local/Cellar/gdk-pixbuf
            /usr/local/Cellar/gobject-introspection
            /usr/local/Cellar/graphite2
            /usr/local/Cellar/gts
            /usr/local/Cellar/harfbuzz
            /usr/local/Cellar/jasper
            /usr/local/Cellar/libpthread-stubs
            /usr/local/Cellar/librsvg
            /usr/local/Cellar/libx11
            /usr/local/Cellar/libxau
            /usr/local/Cellar/libxcb
            /usr/local/Cellar/libxdmcp
            /usr/local/Cellar/libxext
            /usr/local/Cellar/libxrender
            /usr/local/Cellar/lzo
            /usr/local/Cellar/netpbm
            /usr/local/Cellar/pango
            /usr/local/Cellar/pixman
            /usr/local/Cellar/xorgproto
          key: ${{runner.os}}-graphviz-${{steps.mac-graphviz-version.outputs.version}}

      - name: Install dependencies for documentation (MacOS, cache not hit)
        if: startsWith(matrix.cfg.os, 'macos') && matrix.cfg.doc == 1 && steps.cache-graphviz.outputs.cache-hit != 'true'
        run: |
          brew install doxygen graphviz

      - name: Install dependencies for documentation (MacOS, cache hit)
        if: startsWith(matrix.cfg.os, 'macos') && matrix.cfg.doc == 1 && steps.cache-graphviz.outputs.cache-hit == 'true'
        run: |
          /usr/local/opt/gdk-pixbuf/bin/gdk-pixbuf-query-loaders --update-cache

      - name: Configure CMake
        run: >
          cmake
          -S .
          -B build
          ${DEPS_IN_CACHE:--DFETCHCONTENT_QUIET:BOOL=OFF}
          $DEPS_IN_CACHE
          -DENABLE_DOC=${{ matrix.cfg.doc }}

      - name: Build
        run: cmake --build build
