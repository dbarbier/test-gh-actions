name: Build

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      ref:
        description: 'git branch (main if empty)'
        required: false
      fulldocs:
        description: 'Build documentation'
        required: true
        default: "false"

jobs:
  init:
    # This job determines whether we want to run a full build with documentation;
    # it sets a context ${{needs.init.outputs.fulldocs}} which can be used
    # in other steps if their job is declared as "needs: init".
    runs-on: ubuntu-latest
    name: Set workflow variables
    outputs:
      ref: ${{ steps.setvars.outputs.ref }}
      fulldocs: ${{ steps.setvars.outputs.full }}

    steps:
      - id: setvars
        run: |
          ref=${{github.sha}}
          value=0
          if [ "${{github.event_name}}" = "schedule" ]; then
            value=1
          elif [ "${{github.event_name}}" = "workflow_dispatch" ]; then
            # value is 1 if first character is t, T or 1
            value=$( expr " ${{github.event.inputs.full}}" : " [tT1]" )
            ref=${{github.event.inputs.ref}}
          elif [ "${{github.event_name}}" = "push" ]; then
            # value is 1 if pushing on main or ci-doc/*, 0 otherwise
            # GITHUB_REF_NAME environment variable is undocumented
            if [ "$GITHUB_REF_NAME" = "main" ] || expr " $GITHUB_REF_NAME" : " ci-doc/"; then
              value=1
            fi
          elif [ "${{github.event_name}}" = "pull_request" ]; then
            value=1
          fi
          echo "::set-output name=full::$value"
          echo "::set-output name=ref::$ref"

  build:
    needs: init
    strategy:
      fail-fast: false
      matrix:
        cfg:
          #- { os: macos-latest, doc: 1 }
          #- { os: ubuntu-latest, doc: 1 }
          - { os: windows-latest, doc: "${{ needs.init.outputs.fulldocs }}" }
    runs-on: ${{ matrix.cfg.os }}

    steps:
      - name: Print env
        shell: bash
        run: |
          echo "Event: ${{github.event_name}} on ${{github.sha}}"
          env | grep GITHUB_ | sort

      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: false
          ref: ${{ needs.init.outputs.ref }}

      - name: Install Python
        if: matrix.cfg.doc == 1
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install tinytex
        if: matrix.cfg.doc == 1
        uses: r-lib/actions/setup-tinytex@v1

      - name: Install required LaTeX packages (Windows)
        if: startsWith(matrix.cfg.os, 'windows') && matrix.cfg.doc == 1
        run: |
          tlmgr install (Get-Content .\scripts\tex-packages.txt | where { $_ -notmatch "(^\s*#)|(^\s*$)" })

      - name: Install required LaTeX packages (Unix)
        if: (startsWith(matrix.cfg.os, 'macos') || startsWith(matrix.cfg.os, 'ubuntu')) && matrix.cfg.doc == 1
        run: |
          grep -v -E '^\s*(#.*)$' scripts/tex-packages.txt | xargs sudo tlmgr install

      - name: Install dependencies for documentation (Windows)
        if: startsWith(matrix.cfg.os, 'windows') && matrix.cfg.doc == 1
        shell: pwsh
        run: |
          choco install -y --no-progress graphviz.portable
          # Update PATH
          echo "C:/Program Files/doxygen/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Configure CMake
        run: cmake -S .  -B build -DENABLE_DOC=${{ matrix.cfg.doc }}

      - name: Build
        run: cmake --build build
